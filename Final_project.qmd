---
title: "Final_project"
format: html
editor: visual
---

## Loading data

```{r}
data <- read.csv("Data/risk_factors_cervical_cancer.csv")
```

## Loading library

```{r}
library(tidyverse)
library(dplyr)
library(patchwork)
```

## Cleaning

Correcting NAs

```{r}
data <- data |>
  mutate(across(where(is.character), ~na_if(., "?")))
```

Changing binaries to 'yes' and 'no'

```{r}
data <- data |>
  mutate(
    Smokes = case_when(
      Smokes == "0.0" ~ "no",
      Smokes == "1.0" ~ "yes"
    ),
    Hormonal.Contraceptives = case_when(
      Hormonal.Contraceptives == "1.0" ~ "yes",
      Hormonal.Contraceptives == "0.0" ~ "no"
    ),
    IUD = case_when(
      IUD == "0.0" ~ "no",
      IUD == "1.0" ~ "yes"
    ),
    Dx.Cancer = case_when(
      Dx.Cancer == "0" ~ "no",
      Dx.Cancer == "1" ~ "yes"
    )
  )
```

From character to integer

```{r}
data  <- data|> 
  mutate(Number.of.sexual.partners = as.integer(Number.of.sexual.partners),
         First.sexual.intercourse = as.integer(First.sexual.intercourse),
         Num.of.pregnancies = as.integer(Num.of.pregnancies),
         Smokes..years. = as.numeric(Smokes..years.),
         Smokes..packs.year. = as.numeric(Smokes..packs.year.))
```

Updating names, removing dots

```{r}
data <- data |> 
  rename('Smokes.years'= Smokes..years.,
         'Smokes.packs.years' = Smokes..packs.year.) |> 
  rename_with(~ gsub("^STDs\\.\\.", "", .))
```

Creating a Patient ID

```{r}
data <- data |> 
  mutate(ID = row_number()) |> 
  select(ID, everything())
```

## Creating long data

```{r}
data_long <- data |>
  pivot_longer(cols = starts_with("STDs."), 
               names_to = "STD_type", 
               values_to = "has_STD") |>
  mutate(
    STD = ifelse(has_STD == "1.0", STD_type, NA)  # Keep STD name where 1 is present
  ) |>
  group_by(ID) |>
  mutate(
    # Concatenate STD names for each ID, if none, set "No"
    STD = ifelse(all(is.na(STD)), "No", paste(na.omit(STD), collapse = ", "))
  ) |>
  ungroup() |>
  select(-STD_type, -has_STD) |>
  distinct() |> 
  separate_rows(STD, sep = ",")
```

## Changing '.' to '\_' in every column. Lastly, we are removing the double underscores if any.

```{r}
data_long <- data_long |> 
  rename_with(~ str_remove(.,"\\.$")) |> #removes the '.' from the last word in columns
  rename_with(~ str_replace_all(., "\\.", "_")) |> 
  rename_with(~ str_replace_all(.x, "__", "_"))
```

## Cleaning up STD

Removed STDs from the beginning of each row in column STD. Capitalize each word.

```{r}
data_long <- data_long |> 
  mutate(STD = str_remove(STD, "^STDs\\."),
         STD = str_remove(STD, "^ STDs\\."),
         STD = str_replace_all(STD, "\\.", " "),
         STD = str_to_title(STD))
```

Remove column STDs (We have the new STD column).

```{r}
data_long <- data_long |> 
  select(-STDs, -number) 
```

Creating new number column that counts number of the same IDs.

```{r}
data_long <- data_long |> 
  group_by(ID) |> 
  mutate(Number_of_STDs = if_else(all(is.na(STD) | STD == "No"), 0, n_distinct(STD, na.rm = TRUE))) |> 
  ungroup() 
```

Moving STD and Number of STD columns further ahead.

```{r}
data_long <- data_long |> 
  select(
    1:12,               
    STD,                
    Number_of_STDs,      
    everything()        
  )
```

<<<<<<< HEAD
<<<<<<< HEAD
=======

## Plotting
>>>>>>> 36aacb1aa316f5c0ac46d2aa50d3bb67911db3d9

=======
>>>>>>> 96a9036fc9c1cb05ff609e77ef2dd528a459ff8c
```{r}
Numb_sex <- ggplot(data = data_long, aes(y = Dx_Cancer, x = Number_of_sexual_partners, fill = Dx_Cancer)) +
  geom_boxplot(show.legend = FALSE) +
   labs(y = "Cancer Diagnosis",
        x = "Number of Sexual Partners") +
  theme_bw()


first_sex_int <- ggplot(data = data_long, aes(y = Dx_Cancer, x = First_sexual_intercourse, fill = Dx_Cancer)) +
  geom_boxplot(show.legend = FALSE) +
   labs(y = "Cancer Diagnosis",
        x = "Age of First Sexual Intercourse") +
  theme_bw()


(Numb_sex / first_sex_int) +
  plot_annotation(
    title = "Comparison of Sexual Health and Cancer Diagnosis",
    caption = "Source: https://doi.org/10.24432/C5Z310")


<<<<<<< HEAD

=======
>>>>>>> 96a9036fc9c1cb05ff609e77ef2dd528a459ff8c
```

Normalized Counts of STD by Cancer Diagnosis

```{r}
data_normalized_STD <- data_long |>
  group_by(Dx_Cancer, STD) |>
  summarize(count = n(), .groups = "drop") |>
  group_by(Dx_Cancer) |>
  mutate(prop = count / sum(count))


data_normalized_STD <- data_normalized_STD |>
  mutate(STD = fct_reorder(STD, count, .desc = TRUE))

ggplot(data = data_normalized_STD, aes(x = STD, y = prop, fill = Dx_Cancer)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_grid(~Dx_Cancer) +
  labs(title = "Normalized Counts of STD by Cancer Diagnosis",
       x = "STD",
       y = "Proportion",
       fill = "Cancer Diagnosis",
       caption = "Source: https://doi.org/10.24432/C5Z310") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
ggplot(data = data_long, aes(y = Dx_Cancer, x = Age, fill = Dx_Cancer)) +
  geom_boxplot(show.legend = FALSE) +
  labs(y = "Cancer Diagnosis") +
  theme_bw()
```
<<<<<<< HEAD

```{r}
hpv_table <- data_long %>%
  mutate(HPV = ifelse(STD == "Hpv", "Yes", "No")) %>%
  group_by(Dx_Cancer, HPV) %>%
  summarize(count = n(), .groups = "drop") %>%
  pivot_wider(names_from = HPV, values_from = count, values_fill = 0)


hpv_table_Dx <- data_long |> 
   group_by(Dx_Cancer, Dx_HPV) %>%
  summarize(count = n(), .groups = "drop")


# Convert to a matrix for statistical testing
hpv_matrix <- as.matrix(hpv_table[, -1])  # Remove Dx_Cancer column
rownames(hpv_matrix) <- hpv_table$Dx_Cancer

hpv_matrix_Dx <- as.matrix(hpv_table_Dx[, -1])  # Remove Dx_Cancer column
rownames(hpv_matrix_Dx) <- hpv_table_Dx$Dx_Cancer

chi_sq_test <- chisq.test(hpv_matrix)
print(chi_sq_test)


chi_sq_test <- chisq.test(hpv_matrix_Dx)
print(chi_sq_test)



```

```{r}
create_proportional_barplot <- function(data, x_var, fill_var, 
                                        x_label = NULL, y_label = "Proportion", 
                                        fill_label = NULL, title = NULL) {
  # Dynamically use variable names if no custom labels are provided
  if (is.null(x_label)) {
    x_label <- x_var
  }
  
  if (is.null(fill_label)) {
    fill_label <- fill_var
  }
  
  if (is.null(title)) {
    title <- paste("Proportion of", fill_var, "by", x_var)
  }
  
  # Convert the fill variable to a factor to avoid grouping issues
  data[[fill_var]] <- as.factor(data[[fill_var]])
  
  # Generate the plot
  ggplot(data, aes(x = .data[[x_var]], fill = .data[[fill_var]])) +
    geom_bar(position = "fill") +
    labs(
      x = x_label,
      y = y_label,
      fill = fill_label,
      title = title
    ) +
    scale_fill_manual(values = c("0" = "lightblue", "1" = "darkred")) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
}

create_proportional_barplot(data_long, x_var = "IUD", fill_var = "Dx_HPV")
```

```{r}
# Parked for now

=======
>>>>>>> 96a9036fc9c1cb05ff609e77ef2dd528a459ff8c

```{r}
calculate_chi_squared <- function(data, var1, var2) {
  # Remove rows with NA values in either var1 or var2
  filtered_data <- data[!is.na(data[[var1]]) & !is.na(data[[var2]]), ]
  
  # Create the contingency table
  contingency_table <- table(filtered_data[[var1]], filtered_data[[var2]])
  
  # Perform the chi-squared test
  chisq_result <- chisq.test(contingency_table)
  
return(list(contingency_table = contingency_table, chisq_result = chisq_result))
}

calculate_chi_squared(data_long, var1 = "Dx_Cancer", var2 = "IUD")

```

```{r}
create_proportional_barplot <- function(data, x_var, fill_var, 
                                        x_label = NULL, y_label = "Proportion", 
                                        fill_label = NULL, title = NULL) {
  # Dynamically use variable names if no custom labels are provided
  if (is.null(x_label)) x_label <- x_var
  if (is.null(fill_label)) fill_label <- fill_var
  if (is.null(title)) title <- paste("Proportion of", fill_var, "by", x_var)
  
  # Remove rows with NA in either x_var or fill_var
  filtered_data <- data[!is.na(data[[x_var]]) & !is.na(data[[fill_var]]), ]
  
  # Convert the fill variable to a factor
  filtered_data[[fill_var]] <- as.factor(filtered_data[[fill_var]])
  
  # Generate a color palette dynamically
  colors <- setNames(c("lightblue", "darkred"), levels(filtered_data[[fill_var]]))
  
  # Generate the plot
  ggplot(filtered_data, aes(x = .data[[x_var]], fill = .data[[fill_var]])) +
    geom_bar(position = "fill") +
    labs(x = x_label, y = y_label, fill = fill_label, title = title) +
    scale_fill_manual(values = colors) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
}

create_proportional_barplot(data_long, x_var = "IUD", fill_var = "Dx_Cancer")
```
```{r}
calculate_chi_squared <- function(data, var1, var2) {
  # Remove rows with NA values in either var1 or var2
  filtered_data <- data[!is.na(data[[var1]]) & !is.na(data[[var2]]), ]
  
  # Create the contingency table
  contingency_table <- table(filtered_data[[var1]], filtered_data[[var2]])
  
  # Perform the chi-squared test
  chisq_result <- chisq.test(contingency_table)
  
return(list(contingency_table = contingency_table, chisq_result = chisq_result))
}


## Exporting the data
```{r}
write_csv(x = data_long,
          file = "Data/data_long.csv")
```


