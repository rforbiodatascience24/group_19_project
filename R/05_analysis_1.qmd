## Loading libraries
```{r}
library(tidyverse)
library(patchwork)
```


## Loading data
```{r}
data_aug <- read_csv("~/projects/project_r4bd/Data/03_data_aug.csv")
```



## Plotting

```{r}
Numb_sex <- ggplot(data = data_aug, aes(y = Dx_Cancer, x = Number_of_sexual_partners, fill = Dx_Cancer)) +
  geom_boxplot(show.legend = FALSE) +
   labs(y = "Cancer Diagnosis",
        x = "Number of Sexual Partners") +
  theme_bw()


first_sex_int <- ggplot(data = data_aug, aes(y = Dx_Cancer, x = First_sexual_intercourse, fill = Dx_Cancer)) +
  geom_boxplot(show.legend = FALSE) +
   labs(y = "Cancer Diagnosis",
        x = "Age of First Sexual Intercourse") +
  theme_bw()


(Numb_sex / first_sex_int) +
  plot_annotation(
    title = "Comparison of Sexual History and Cancer Diagnosis",
    caption = "Source: https://doi.org/10.24432/C5Z310")

```

Normalized Counts of STD by Cancer Diagnosis

```{r}
data_normalized_STD <- data_aug |>
  group_by(Dx_Cancer, STD) |>
  summarize(count = n(), .groups = "drop") |>
  group_by(Dx_Cancer) |>
  mutate(prop = count / sum(count))


data_normalized_STD <- data_normalized_STD |>
  mutate(STD = fct_reorder(STD, count, .desc = TRUE))

ggplot(data = data_normalized_STD, aes(x = STD, y = prop, fill = Dx_Cancer)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_grid(~Dx_Cancer) +
  labs(title = "Proportion of STD type by Cancer Diagnosis",
       x = "STD",
       y = "Proportion",
       fill = "Cancer Diagnosis",
       caption = "Source: https://doi.org/10.24432/C5Z310") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Age and Cancer diagnosis
```{r}
ggplot(data = data_aug, aes(y = Dx_Cancer, x = Age, fill = Dx_Cancer)) +
  geom_boxplot(show.legend = FALSE) +
  labs(y = "Cancer Diagnosis") +
  theme_bw()
```


Function for making a barplot
```{r}
create_proportional_barplot_1 <- function(data, x_var, fill_var, 
                                        x_label = NULL, y_label = "Proportion", 
                                        fill_label = NULL, title = NULL) {
  # Dynamically use variable names if no custom labels are provided
  if (is.null(x_label)) x_label <- x_var
  if (is.null(fill_label)) fill_label <- fill_var
  if (is.null(title)) title <- paste("Proportion of", fill_var, "by", x_var)
  
  # Summarize the data by grouping by the ID and selecting the first value for each variable
  data_summary <- data %>%
    group_by(ID) %>%
    summarise(
      x_value = first(.data[[x_var]]),  # Taking the first value for x_var per ID
      fill_value = first(.data[[fill_var]])   # Taking the first value for fill_var per ID
    )
  
  # Remove rows with NA values in either x_value or fill_value
  filtered_data <- data_summary[!is.na(data_summary$x_value) & !is.na(data_summary$fill_value), ]
  
  # Convert the fill variable to a factor
  filtered_data$fill_value <- as.factor(filtered_data$fill_value)
  
  # Generate a color palette dynamically
  colors <- setNames(c("lightblue", "darkred"), levels(filtered_data$fill_value))
  
  # Generate the plot
  ggplot(filtered_data, aes(x = .data$x_value, fill = .data$fill_value)) +
    geom_bar(position = "fill") +
    labs(x = x_label, y = y_label, fill = fill_label, title = title) +
    scale_fill_manual(values = colors) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
}
```


Function for making a chi squared test
```{r}
calculate_chi_squared_1 <- function(data, var1, var2) {
  # Summarize the data so that each ID has one row
  data_summary <- data %>%
    group_by(ID) %>%
    summarise(
      var1_value = first(.data[[var1]]),  # Taking the first value for var1 per ID
      var2_value = first(.data[[var2]])   # Taking the first value for var2 per ID
    )
  
  # Remove rows with NA values in either of the variables
  filtered_data <- data_summary[!is.na(data_summary$var1_value) & !is.na(data_summary$var2_value), ]
  
  # Create the contingency table
  contingency_table <- table(filtered_data$var1_value, filtered_data$var2_value)
  
  # Perform the chi-squared test
  chisq_result <- chisq.test(contingency_table)
  
  return(list(contingency_table = contingency_table, chisq_result = chisq_result))
}
```

